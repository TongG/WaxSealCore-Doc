<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/WSCKey.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/WSCKey</TokenIdentifier>
			<Abstract type="html">The WSCKey class is a subclass of WSCKeychainItem representing a key that is stored in a keychain.
    On the other hand, if the key represented by WSCKey is not stored in a keychain, 
    passing it to methods of WaxSealCore returns errors.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
            
			
			<NodeRef refid="2"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/setKeyData:</TokenIdentifier>
			<Abstract type="html">The key data bytes of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (retain, readonly) NSData *keyData</Declaration>
			
			
			<Anchor>//api/name/keyData</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/keyData</TokenIdentifier>
			<Abstract type="html">The key data bytes of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (retain, readonly) NSData *keyData</Declaration>
			
			
			<Anchor>//api/name/keyData</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/WSCKey/keyData</TokenIdentifier>
			<Abstract type="html">The key data bytes of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (retain, readonly) NSData *keyData</Declaration>
			
			
			<Anchor>//api/name/keyData</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/setKeyAlgorithm:</TokenIdentifier>
			<Abstract type="html">The key algorithm of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) WSCKeyAlgorithmType keyAlgorithm</Declaration>
			
			
			<Anchor>//api/name/keyAlgorithm</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/keyAlgorithm</TokenIdentifier>
			<Abstract type="html">The key algorithm of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) WSCKeyAlgorithmType keyAlgorithm</Declaration>
			
			
			<Anchor>//api/name/keyAlgorithm</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/WSCKey/keyAlgorithm</TokenIdentifier>
			<Abstract type="html">The key algorithm of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) WSCKeyAlgorithmType keyAlgorithm</Declaration>
			
			
			<Anchor>//api/name/keyAlgorithm</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/setEncryptAlgorithm:</TokenIdentifier>
			<Abstract type="html">The encrypt algorithm of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) WSCKeyAlgorithmType encryptAlgorithm</Declaration>
			
			
			<Anchor>//api/name/encryptAlgorithm</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/encryptAlgorithm</TokenIdentifier>
			<Abstract type="html">The encrypt algorithm of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) WSCKeyAlgorithmType encryptAlgorithm</Declaration>
			
			
			<Anchor>//api/name/encryptAlgorithm</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/WSCKey/encryptAlgorithm</TokenIdentifier>
			<Abstract type="html">The encrypt algorithm of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) WSCKeyAlgorithmType encryptAlgorithm</Declaration>
			
			
			<Anchor>//api/name/encryptAlgorithm</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/setKeySizeInBits:</TokenIdentifier>
			<Abstract type="html">The size in bits of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) NSUInteger keySizeInBits</Declaration>
			
			
			<Anchor>//api/name/keySizeInBits</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/keySizeInBits</TokenIdentifier>
			<Abstract type="html">The size in bits of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) NSUInteger keySizeInBits</Declaration>
			
			
			<Anchor>//api/name/keySizeInBits</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/WSCKey/keySizeInBits</TokenIdentifier>
			<Abstract type="html">The size in bits of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) NSUInteger keySizeInBits</Declaration>
			
			
			<Anchor>//api/name/keySizeInBits</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/setKeyClass:</TokenIdentifier>
			<Abstract type="html">The type of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) WSCKeyClass keyClass</Declaration>
			
			
			<Anchor>//api/name/keyClass</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/keyClass</TokenIdentifier>
			<Abstract type="html">The type of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) WSCKeyClass keyClass</Declaration>
			
			
			<Anchor>//api/name/keyClass</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/WSCKey/keyClass</TokenIdentifier>
			<Abstract type="html">The type of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) WSCKeyClass keyClass</Declaration>
			
			
			<Anchor>//api/name/keyClass</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/setKeyUsage:</TokenIdentifier>
			<Abstract type="html">The usage of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) WSCKeyUsage keyUsage</Declaration>
			
			
			<Anchor>//api/name/keyUsage</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/keyUsage</TokenIdentifier>
			<Abstract type="html">The usage of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) WSCKeyUsage keyUsage</Declaration>
			
			
			<Anchor>//api/name/keyUsage</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/WSCKey/keyUsage</TokenIdentifier>
			<Abstract type="html">The usage of a key represented by receiver.
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (assign, readonly) WSCKeyUsage keyUsage</Declaration>
			
			
			<Anchor>//api/name/keyUsage</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/setEffectiveDate:</TokenIdentifier>
			<Abstract type="html">The effective date of a key represented by receiver.</Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (retain, readonly) NSDate *effectiveDate</Declaration>
			
			<ReturnValue><Abstract type="html">nil if a key doesn&apos;t have an effective date.
  </Abstract></ReturnValue>
			<Anchor>//api/name/effectiveDate</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/effectiveDate</TokenIdentifier>
			<Abstract type="html">The effective date of a key represented by receiver.</Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (retain, readonly) NSDate *effectiveDate</Declaration>
			
			<ReturnValue><Abstract type="html">nil if a key doesn&apos;t have an effective date.
  </Abstract></ReturnValue>
			<Anchor>//api/name/effectiveDate</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/WSCKey/effectiveDate</TokenIdentifier>
			<Abstract type="html">The effective date of a key represented by receiver.</Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (retain, readonly) NSDate *effectiveDate</Declaration>
			
			<ReturnValue><Abstract type="html">nil if a key doesn&apos;t have an effective date.
  </Abstract></ReturnValue>
			<Anchor>//api/name/effectiveDate</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/setExpirationDate:</TokenIdentifier>
			<Abstract type="html">The expiration date of a key represented by receiver.</Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (retain, readonly) NSDate *expirationDate</Declaration>
			
			<ReturnValue><Abstract type="html">nil if a key doesn&apos;t have an expiration date.
  </Abstract></ReturnValue>
			<Anchor>//api/name/expirationDate</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/expirationDate</TokenIdentifier>
			<Abstract type="html">The expiration date of a key represented by receiver.</Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (retain, readonly) NSDate *expirationDate</Declaration>
			
			<ReturnValue><Abstract type="html">nil if a key doesn&apos;t have an expiration date.
  </Abstract></ReturnValue>
			<Anchor>//api/name/expirationDate</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/WSCKey/expirationDate</TokenIdentifier>
			<Abstract type="html">The expiration date of a key represented by receiver.</Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (retain, readonly) NSDate *expirationDate</Declaration>
			
			<ReturnValue><Abstract type="html">nil if a key doesn&apos;t have an expiration date.
  </Abstract></ReturnValue>
			<Anchor>//api/name/expirationDate</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/isEqualToKey:</TokenIdentifier>
			<Abstract type="html">Returns a BOOL value that indicates whether a given key is equal to receiver.</Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>- (BOOL)isEqualToKey:(WSCKey *)_AnotherKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>_AnotherKey</Name>
					<Abstract type="html">The key with which to compare the receiver.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if _AnotherKey is equivalent to receiver (if they have the same data bytes);
          otherwise NO.

  One more thing

   When you know both objects are keychains, this method is a faster way to check equality than method isEqual:.
  </Abstract></ReturnValue>
			<Anchor>//api/name/isEqualToKey:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/setSecKey:</TokenIdentifier>
			<Abstract type="html">The reference of the SecKey opaque object, which wrapped by WSCKey object. (read-only)
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (unsafe_unretained, readonly) SecKeyRef secKey</Declaration>
			
			
			<Anchor>//api/name/secKey</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCKey/secKey</TokenIdentifier>
			<Abstract type="html">The reference of the SecKey opaque object, which wrapped by WSCKey object. (read-only)
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (unsafe_unretained, readonly) SecKeyRef secKey</Declaration>
			
			
			<Anchor>//api/name/secKey</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/WSCKey/secKey</TokenIdentifier>
			<Abstract type="html">The reference of the SecKey opaque object, which wrapped by WSCKey object. (read-only)
  </Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>@property (unsafe_unretained, readonly) SecKeyRef secKey</Declaration>
			
			
			<Anchor>//api/name/secKey</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WSCKey/keyWithSecKeyRef:</TokenIdentifier>
			<Abstract type="html">Creates and returns a WSCKey object using the given reference to the instance of SecKey opaque type.</Abstract>
			<DeclaredIn>WSCKey.h</DeclaredIn>
			
			<Declaration>+ (instancetype)keyWithSecKeyRef:(SecKeyRef)_SecKeyRef</Declaration>
			<Parameters>
				<Parameter>
					<Name>_SecKeyRef</Name>
					<Abstract type="html">A reference to the instance of SecKey opaque type.
  </Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A WSCKey object initialized with the given reference to the instance of SecKey opaque type.
          Return nil if _SecKeyRef is nil or an error occured.
  </Abstract></ReturnValue>
			<Anchor>//api/name/keyWithSecKeyRef:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
        
	</File>
</Tokens>