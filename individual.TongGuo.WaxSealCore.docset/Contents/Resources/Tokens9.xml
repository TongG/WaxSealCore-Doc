<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/WSCTrustedApplication.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/WSCTrustedApplication</TokenIdentifier>
			<Abstract type="html">Identifies the trusted application in an access permission.
  </Abstract>
			<DeclaredIn>WSCTrustedApplication.h</DeclaredIn>
            
			
			<NodeRef refid="9"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCTrustedApplication/setUniqueIdentification:</TokenIdentifier>
			<Abstract type="html">Retrieves and sets the unique identification of the trusted application represented by receiver.
    </Abstract>
			<DeclaredIn>WSCTrustedApplication.h</DeclaredIn>
			
			<Declaration>@property (retain, readwrite) NSData *uniqueIdentification</Declaration>
			
			
			<Anchor>//api/name/uniqueIdentification</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCTrustedApplication/uniqueIdentification</TokenIdentifier>
			<Abstract type="html">Retrieves and sets the unique identification of the trusted application represented by receiver.
    </Abstract>
			<DeclaredIn>WSCTrustedApplication.h</DeclaredIn>
			
			<Declaration>@property (retain, readwrite) NSData *uniqueIdentification</Declaration>
			
			
			<Anchor>//api/name/uniqueIdentification</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/WSCTrustedApplication/uniqueIdentification</TokenIdentifier>
			<Abstract type="html">Retrieves and sets the unique identification of the trusted application represented by receiver.
    </Abstract>
			<DeclaredIn>WSCTrustedApplication.h</DeclaredIn>
			
			<Declaration>@property (retain, readwrite) NSData *uniqueIdentification</Declaration>
			
			
			<Anchor>//api/name/uniqueIdentification</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WSCTrustedApplication/trustedApplicationWithContentsOfURL:error:</TokenIdentifier>
			<Abstract type="html">Creates a trusted application object based on the application specified by an URL.</Abstract>
			<DeclaredIn>WSCTrustedApplication.h</DeclaredIn>
			
			<Declaration>+ (instancetype)trustedApplicationWithContentsOfURL:(NSURL *)_ApplicationURL error:(NSError **)_Error</Declaration>
			<Parameters>
				<Parameter>
					<Name>_ApplicationURL</Name>
					<Abstract type="html">The URL to the application or tool to trust. 
                         For application bundles, use the URL to the bundle directory. 
                         Pass nil to refer to the application or tool making this call.
                         </Abstract>
				</Parameter><Parameter>
					<Name>_Error</Name>
					<Abstract type="html">On input, a pointer to an error object.
                If an error occurs, this pointer is set to an actual error object containing the error information.
                You may specify nil for this parameter if you don&apos;t want the error information.
                </Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Newly created trusted application object. Returns nil if an error occurs.
  </Abstract></ReturnValue>
			<Anchor>//api/name/trustedApplicationWithContentsOfURL:error:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCTrustedApplication/isEqualToTrustedApplication:</TokenIdentifier>
			<Abstract type="html">Returns a BOOL value that indicates whether a given trusted application is equal to receiver.</Abstract>
			<DeclaredIn>WSCTrustedApplication.h</DeclaredIn>
			
			<Declaration>- (BOOL)isEqualToTrustedApplication:(WSCTrustedApplication *)_AnotherTrustedApplication</Declaration>
			<Parameters>
				<Parameter>
					<Name>_AnotherTrustedApplication</Name>
					<Abstract type="html">The trusted application with which to compare the receiver.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if _AnotherTrustedApplication is equivalent to receiver (if they have the same unique identification);
          otherwise NO.

  One more thing

   When you know both objects are keychains, this method is a faster way to check equality than method isEqual:.
  </Abstract></ReturnValue>
			<Anchor>//api/name/isEqualToTrustedApplication:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCTrustedApplication/setSecTrustedApplication:</TokenIdentifier>
			<Abstract type="html">The reference of the secTrustedApplication opaque object, which wrapped by WSCTrustedApplication object.
  </Abstract>
			<DeclaredIn>WSCTrustedApplication.h</DeclaredIn>
			
			<Declaration>@property (unsafe_unretained, readonly) SecTrustedApplicationRef secTrustedApplication</Declaration>
			
			
			<Anchor>//api/name/secTrustedApplication</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/WSCTrustedApplication/secTrustedApplication</TokenIdentifier>
			<Abstract type="html">The reference of the secTrustedApplication opaque object, which wrapped by WSCTrustedApplication object.
  </Abstract>
			<DeclaredIn>WSCTrustedApplication.h</DeclaredIn>
			
			<Declaration>@property (unsafe_unretained, readonly) SecTrustedApplicationRef secTrustedApplication</Declaration>
			
			
			<Anchor>//api/name/secTrustedApplication</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/WSCTrustedApplication/secTrustedApplication</TokenIdentifier>
			<Abstract type="html">The reference of the secTrustedApplication opaque object, which wrapped by WSCTrustedApplication object.
  </Abstract>
			<DeclaredIn>WSCTrustedApplication.h</DeclaredIn>
			
			<Declaration>@property (unsafe_unretained, readonly) SecTrustedApplicationRef secTrustedApplication</Declaration>
			
			
			<Anchor>//api/name/secTrustedApplication</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WSCTrustedApplication/trustedApplicationWithSecTrustedApplicationRef:</TokenIdentifier>
			<Abstract type="html">Creates and returns a WSCTrustedApplication object using the given reference to the instance of SecTrustedApplication opaque type.</Abstract>
			<DeclaredIn>WSCTrustedApplication.h</DeclaredIn>
			
			<Declaration>+ (instancetype)trustedApplicationWithSecTrustedApplicationRef:(SecTrustedApplicationRef)_SecTrustedAppRef</Declaration>
			<Parameters>
				<Parameter>
					<Name>_SecTrustedAppRef</Name>
					<Abstract type="html">A reference to the instance of SecTrustedApplication opaque type.
  </Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A WSCTrustedApplication object initialized with the givent reference to the instance of SecTrustedApplication opaque type.
          Return nil if _SecTrustedAppRef is nil.
  </Abstract></ReturnValue>
			<Anchor>//api/name/trustedApplicationWithSecTrustedApplicationRef:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
        
	</File>
</Tokens>